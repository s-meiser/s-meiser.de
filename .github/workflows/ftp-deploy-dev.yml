name: Deploy website on dev subdomain

on:
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git Ref (Optional)
        required: false

jobs:
  web-deploy:
    runs-on: ubuntu-latest
    name: Deploy
    environment: ftp-deploy
    defaults:
      run:
        working-directory: ./app
    steps:

      # get staging branch
      # see https://github.com/actions/checkout to set version
      - uses: actions/checkout@v4
        with:
          ref: staging

      # build js/css files
      # see https://github.com/actions/setup-node to set version
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          check-latest: true
      - run: yarn install
      - run: npm update
      - run: yarn encore production

      # install php
      - name: Setup PHP
        # see https://github.com/shivammathur/setup-php to set version
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          coverage: none
          tools: composer:v2
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo
        env:
          update: true
      - name: Check PHP Version
        run: php -v

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        # https://github.com/actions/cache to set version
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install

      # Prepare .env file for production
      - name: Make production envfile
        # see https://github.com/SpicyPizza/create-envfile to set version
        uses: SpicyPizza/create-envfile@v2
        with:
          envkey_APP_ENV: prod
          envkey_APP_DEBUG: false
          envkey_APP_SECRET: ${{ secrets.DEV_APP_SECRET }}
          file_name: .env

      - name: Debug
        run: |
          ls -al ./public/

      - name: Convert .env to production php file
        run: |
          composer dump-env prod

      - name: Debug
        run: |
          ls -al ./

      # install lftp
      - name: Install lftp
        run: |
          sudo apt-get update
          sudo apt-get install -y lftp

      # Cleanup
      - name: Cleanup
        run: |
          # single files
          sudo rm -rf \
            .env \
            .gitignore
          sudo rm -rf node_modules

      # Sync files
      - name: Sync files
        run: lftp -e "open $FTP_HOST; user $FTP_USER '$FTP_PASS'; set ftp:ssl-allow no; mirror -R --ignore-time --parallel=10 -v" /
        env:
          FTP_HOST: ${{ secrets.FTP_DEV_HOST }}
          FTP_USER: ${{ secrets.FTP_DEV_USER }}
          FTP_PASS: ${{ secrets.FTP_DEV_PASS }}

      # Create .htaccess file locally
#       - name: Create .htaccess file
#         run: echo "RewriteEngine on\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^ index.php [L]" > .htaccess

      # add .htaccess file
#       - name: add .htaccess file
#         run: |
#           lftp -u "$FTP_USER","$FTP_PASS" $FTP_HOST <<EOF
#             set ftp:ssl-allow no
#             put -O /public/.htaccess  .htaccess
#             quit
#           EOF
#         env:
#           FTP_HOST: ${{ secrets.FTP_DEV_HOST }}
#           FTP_USER: ${{ secrets.FTP_DEV_USER }}
#           FTP_PASS: ${{ secrets.FTP_DEV_PASS }}

      # Clear cache hack
      - name: Clear cache hack
        run: |
          lftp -u "$FTP_USER","$FTP_PASS" $FTP_HOST <<EOF
            set ftp:ssl-allow no
            rm -rf /var/cache/prod
            quit
          EOF
        env:
          FTP_HOST: ${{ secrets.FTP_DEV_HOST }}
          FTP_USER: ${{ secrets.FTP_DEV_USER }}
          FTP_PASS: ${{ secrets.FTP_DEV_PASS }}